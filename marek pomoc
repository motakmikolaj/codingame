import sys
import math

def odleglosc(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
tab1 = [(2,2),(3,2),(4,3),(5,3),(5,2),(6,2),(7,2),(8,2),(9,0),(7,1),(5,1),(3,1),(2,1),(4,2),(6,3),(7,3),(8,3),(8,4),(7,4),(6,5)] #prawo
tab2 = [(2,2),(2,3),(3,4),(4,4),(5,4),(6,4),(5,5),(3,5),(2,5),(1,5),(0,6),(1,3),(1,2),(3,3),(2,4),(3,5),(4,5),(5,5),(8,1),(6,1)] #lewo
tab3 = [(2,2),(3,3),(4,4),(5,3),(6,3),(7,3),(8,3),(8,4),(7,4),(6,5),(4,5),(3,5),(2,4),(1,5),(1,4),(7,5),(8,5),(4,3),(1,1),(0,0)] #srodek
pointer = [0,0,0,10,10]
busters_per_player = int(input())  # the amount of busters you control
ghost_count = int(input())  # the amount of ghosts on the map
my_team_id  = int(input())  # if this is 0, your base is on the top left of the map, if it is one, on the bottom right
op_team_id  = (my_team_id - 1) * (-1)
my_cooldown = {}

if my_team_id == 0:
    my_base_x = 0
    my_base_y = 0
    mapx = [0, 1000, 3000, 5000, 7000, 9000, 11000, 13000, 15000, 16000]  
    mapy = [0, 1000, 2750, 4500, 6250, 8000, 9000]
else:
    my_base_x = 16000
    my_base_y = 9000  
    mapx = [16000, 15000, 13000, 11000, 9000, 7000, 5000, 3000, 1000, 0]  
    mapy = [9000, 8000, 6250, 4500, 2750, 1000, 0]

# ====================================    
# game loop
# ====================================  
turn = 0

while True:
    entities = int(input())  # the number of busters and ghosts visible to you
    my_bust  = {} #list of our busters
    op_bust  = {} #list of opposite busters
    visible  = {} #list of visible ghosts
    
    for i in range(entities):
        entity_id, x, y, entity_type, state, value = [int(j) for j in input().split()]
        if   (entity_type == 0):
            if (my_team_id == 0):
                my_bust[entity_id] = [x, y, entity_type, state, value]
            else:
                op_bust[entity_id] = [x, y, entity_type, state, value]
        elif (entity_type == 1):
            if (my_team_id == 1):
                my_bust[entity_id] = [x, y, entity_type, state, value]
            else:
                op_bust[entity_id] = [x, y, entity_type, state, value]
        else:
            visible[entity_id] = [x, y, entity_type, state, value]
        
    print(my_bust, file=sys.stderr)   
    print(op_bust, file=sys.stderr)   
    print(visible, file=sys.stderr)   
    
    for b in my_bust:
        print(my_bust[b], file=sys.stderr) 
        
        if not (b in my_cooldown):
            my_cooldown[b] = 0

        stun = -1
        if(my_cooldown[b] == 0):
            for ob in op_bust:
                if(op_bust[ob][3] != 2):
                    if (odleglosc(my_bust[b][0], my_bust[b][1], op_bust[ob][0], op_bust[ob][1]) < 1760):
                        stun = ob
                        break              
        if stun != -1:
            print("STUN " + str(stun))
            my_cooldown[b] = 20
        elif my_bust[b][3] == 1:
            if odleglosc(my_bust[b][0], my_bust[b][1], my_base_x, my_base_y) < 1600:
                print("RELEASE")
            else:
                print("MOVE " + str(my_base_x) + " " + str(my_base_y))
        else:
            closest = [-1,-1]
            howfar0 = -1
            bust = -1
            for g in visible:
                howfar = odleglosc(my_bust[b][0], my_bust[b][1], visible[g][0], visible[g][1])
                if ((howfar < 1760) and (howfar > 900)):
                    bust = g
                    break
                elif closest == [-1,-1]:
                    closest = [visible[g][0], visible[g][1]]
                    howfar0 = howfar
                elif (howfar > 1760) and (howfar0 > howfar):
                    closest = [visible[g][0], visible[g][1]]
                    howfar0 = howfar
                elif (howfar < 900) and (howfar0 > howfar + 800):
                    closest = [visible[g][0], visible[g][1]]
                    howfar0 = howfar
                        
            if (bust != -1):
                print("BUST " + str(bust))
            elif (closest != [-1,-1]):
                print("MOVE " + str(closest[0]) + " " + str(closest[1]))
            else:
                d = b
                if my_team_id == 1:
                    d = d - busters_per_player
                if (d == 0 or d == 3):
                    print("OX0", mapx[tab1[pointer[d]][0]], mapy[tab1[pointer[d]][1]], file=sys.stderr) 
                    if(my_bust[b][0] == mapx[tab1[pointer[d]][0]] and my_bust[b][1] == mapy[tab1[pointer[d]][1]]):
                        pointer[d] += 1
                        if pointer[d] >= 20:
                            pointer[d] = 0
                    print("MOVE " + str(mapx[tab1[pointer[d]][0]]) + " " + str(mapy[tab1[pointer[d]][1]]))
                elif (d == 1 or d == 4):
                    print("OX1", mapx[tab2[pointer[d]][0]], mapy[tab2[pointer[d]][1]], file=sys.stderr) 
                    if(my_bust[b][0] == mapx[tab2[pointer[d]][0]] and my_bust[b][1] == mapy[tab2[pointer[d]][1]]):
                        pointer[d] += 1
                        if pointer[d] >= 20:
                            pointer[d] = 0
                    print("MOVE " + str(mapx[tab2[pointer[d]][0]]) + " " + str(mapy[tab2[pointer[d]][1]]))
                else:
                    print("OX2", mapx[tab3[pointer[d]][0]], mapy[tab3[pointer[d]][1]], file=sys.stderr) 
                    if(my_bust[b][0] == mapx[tab3[pointer[d]][0]] and my_bust[b][1] == mapy[tab3[pointer[d]][1]]):
                        pointer[d] += 1
                        if pointer[d] >= 20:
                            pointer[d] = 0
                    print("MOVE " + str(mapx[tab3[pointer[d]][0]]) + " " + str(mapy[tab3[pointer[d]][1]]))
                    
        if my_cooldown[b] > 0:
            my_cooldown[b] -= 1
                  
        # MOVE x y | BUST id | RELEASE
